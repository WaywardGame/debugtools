import { ActionType } from "entity/action/IAction";
import Creature from "entity/creature/Creature";
import { IDamageInfo } from "entity/creature/ICreature";
import Human from "entity/Human";
import NPC from "entity/npc/NPC";
import { Source } from "entity/player/IMessageManager";
import Player from "entity/player/Player";
import { Events } from "event/EventBuses";
import { IEventEmitter } from "event/EventEmitter";
import Game from "game/Game";
import { Dictionary } from "language/Dictionaries";
import Interrupt from "language/dictionary/Interrupt";
import InterruptChoice from "language/dictionary/InterruptChoice";
import Message from "language/dictionary/Message";
import InterModRegistry from "mod/InterModRegistry";
import Mod from "mod/Mod";
import { Bindable, BindCatcherApi } from "newui/IBindingManager";
import { DialogId } from "newui/screen/screens/game/Dialogs";
import { MenuBarButtonType } from "newui/screen/screens/game/static/menubar/MenuBarButtonDescriptions";
import { SpriteBatchLayer } from "renderer/IWorldRenderer";
import WorldRenderer from "renderer/WorldRenderer";
import { ITile, OverlayType } from "tile/ITerrain";
import { IInjectionApi } from "utilities/Inject";
import Log from "utilities/Log";
import { Direction } from "utilities/math/Direction";
import { IVector2 } from "utilities/math/IVector";
import Vector2 from "utilities/math/Vector2";
import Actions from "./Actions";
import { IGlobalData, IPlayerData, ISaveData, ModRegistrationInspectDialogEntityInformationSubsection, ModRegistrationInspectDialogInformationSection, ModRegistrationMainDialogPanel } from "./IDebugTools";
import LocationSelector from "./LocationSelector";
import UnlockedCameraMovementHandler from "./UnlockedCameraMovementHandler";
interface IDebugToolsEvents extends Events<Mod> {
    playerDataChange<K extends keyof IPlayerData>(playerId: number, property: K, newValue: IPlayerData[K]): any;
    inspect(): any;
    permissionsChange(): any;
}
export default class DebugTools extends Mod {
    event: IEventEmitter<this, IDebugToolsEvents>;
    static readonly INSTANCE: DebugTools;
    static readonly LOG: Log;
    readonly actions: Actions;
    readonly selector: LocationSelector;
    readonly unlockedCameraMovementHandler: UnlockedCameraMovementHandler;
    readonly modRegistryMainDialogPanels: InterModRegistry<ModRegistrationMainDialogPanel>;
    readonly modRegistryInspectDialogPanels: InterModRegistry<ModRegistrationInspectDialogInformationSection>;
    readonly modRegistryInspectDialogEntityInformationSubsections: InterModRegistry<ModRegistrationInspectDialogEntityInformationSubsection>;
    readonly bindableToggleDialog: Bindable;
    readonly bindableCloseInspectDialog: Bindable;
    readonly bindableInspectTile: Bindable;
    readonly bindableInspectLocalPlayer: Bindable;
    readonly bindableHealLocalPlayer: Bindable;
    readonly bindableTeleportLocalPlayer: Bindable;
    readonly bindableToggleNoClipOnLocalPlayer: Bindable;
    readonly bindableToggleCameraLock: Bindable;
    readonly bindableToggleFullVisibility: Bindable;
    readonly bindablePaint: Bindable;
    readonly bindableErasePaint: Bindable;
    readonly bindableClearPaint: Bindable;
    readonly bindableCancelPaint: Bindable;
    readonly bindableCompletePaint: Bindable;
    readonly dictionary: Dictionary;
    readonly messageFailureTileBlocked: Message;
    readonly source: Source;
    readonly interruptUnlockRecipes: Interrupt;
    readonly interruptTravelAway: Interrupt;
    readonly choiceSailToCivilization: InterruptChoice;
    readonly choiceTravelAway: InterruptChoice;
    readonly actionPlaceTemplate: ActionType;
    readonly actionSelectionExecute: ActionType;
    readonly actionTeleportEntity: ActionType;
    readonly actionKill: ActionType;
    readonly actionClone: ActionType;
    readonly actionSetTime: ActionType;
    readonly actionHeal: ActionType;
    readonly actionSetStat: ActionType;
    readonly actionSetTamed: ActionType;
    readonly actionRemove: ActionType;
    readonly actionSetWeightBonus: ActionType;
    readonly actionChangeTerrain: ActionType;
    readonly actionToggleTilled: ActionType;
    readonly actionUpdateStatsAndAttributes: ActionType;
    readonly actionAddItemToInventory: ActionType;
    readonly actionPaint: ActionType;
    readonly actionUnlockRecipes: ActionType;
    readonly actionToggleInvulnerable: ActionType;
    readonly actionSetSkill: ActionType;
    readonly actionSetGrowingStage: ActionType;
    readonly actionToggleNoclip: ActionType;
    readonly actionTogglePermissions: ActionType;
    readonly dialogMain: DialogId;
    readonly dialogInspect: DialogId;
    readonly menuBarButton: MenuBarButtonType;
    readonly overlayTarget: OverlayType;
    readonly overlayPaint: OverlayType;
    data: ISaveData;
    globalData: IGlobalData;
    private cameraState;
    readonly isCameraUnlocked: boolean;
    getPlayerData<K extends keyof IPlayerData>(player: Player, key: K): IPlayerData[K];
    setPlayerData<K extends keyof IPlayerData>(player: Player, key: K, value: IPlayerData[K]): void;
    initializeGlobalData(data?: IGlobalData): IGlobalData | undefined;
    initializeSaveData(data?: ISaveData): ISaveData | undefined;
    onLoad(): void;
    onUnload(): void;
    onSave(): any;
    updateFog(): void;
    setCameraUnlocked(unlocked: boolean): void;
    inspect(what: Vector2 | Creature | Player | NPC): void;
    toggleDialog(): void;
    hasPermission(): boolean | undefined;
    toggleFog(fog: boolean): void;
    toggleLighting(lighting: boolean): void;
    postFieldOfView(): void;
    onGameScreenVisible(): void;
    getZoomLevel(): number | undefined;
    getCameraPosition(position: IVector2): IVector2 | undefined;
    onPlayerDamage(player: Player, info: IDamageInfo): number | undefined;
    canCreatureAttack(creature: Creature, enemy: Player | Creature): boolean | undefined;
    onMove(player: Player, nextX: number, nextY: number, tile: ITile, direction: Direction): boolean | undefined;
    onNoInputReceived(player: Player): void;
    getPlayerWeightMovementPenalty(player: Player): number | undefined;
    getPlayerSpriteBatchLayer(player: Player, batchLayer: SpriteBatchLayer): SpriteBatchLayer | undefined;
    isHumanSwimming(human: Human, isSwimming: boolean): boolean | undefined;
    getPlayerMaxWeight(weight: number, player: Player): number;
    onBindLoop(bindPressed: Bindable, api: BindCatcherApi): Bindable;
    getAmbientColor(api: IInjectionApi<WorldRenderer, "calculateAmbientColor">): void;
    getAmbientLightLevel(api: IInjectionApi<Game, "calculateAmbientLightLevel">, z: number): void;
    getTileLightLevel(api: IInjectionApi<Game, "calculateTileLightLevel">, tile: ITile, x: number, y: number, z: number): void;
    private needsUpgrade;
}
export {};
