/*!
 * Copyright 2011-2023 Unlok
 * https://www.unlok.ca
 *
 * Credits & Thanks:
 * https://www.unlok.ca/credits-thanks/
 *
 * Wayward is a copyrighted and licensed work. Modification and/or distribution of any source files is prohibited. If you wish to modify the game in any way, please refer to the modding guide:
 * https://github.com/WaywardGame/types/wiki
 */
import { ActionType } from "@wayward/game/game/entity/action/IAction";
import Creature from "@wayward/game/game/entity/creature/Creature";
import NPC from "@wayward/game/game/entity/npc/NPC";
import { Source } from "@wayward/game/game/entity/player/IMessageManager";
import Player from "@wayward/game/game/entity/player/Player";
import { InspectType } from "@wayward/game/game/inspection/IInspection";
import Island from "@wayward/game/game/island/Island";
import Item from "@wayward/game/game/item/Item";
import { OverlayType } from "@wayward/game/game/tile/ITerrain";
import Tile from "@wayward/game/game/tile/Tile";
import Dictionary from "@wayward/game/language/Dictionary";
import Message from "@wayward/game/language/dictionary/Message";
import InterModRegistry from "@wayward/game/mod/InterModRegistry";
import Mod from "@wayward/game/mod/Mod";
import { Renderer } from "@wayward/game/renderer/Renderer";
import { WorldRenderer } from "@wayward/game/renderer/world/WorldRenderer";
import { IBindHandlerApi } from "@wayward/game/ui/input/Bind";
import Bindable from "@wayward/game/ui/input/Bindable";
import { DialogId } from "@wayward/game/ui/screen/screens/game/Dialogs";
import { MenuBarButtonType } from "@wayward/game/ui/screen/screens/game/static/menubar/IMenuBarButton";
import { IVector2 } from "@wayward/game/utilities/math/IVector";
import Log from "@wayward/utilities/Log";
import { IInjectionApi } from "@wayward/utilities/class/Inject";
import { Events, IEventEmitter } from "@wayward/utilities/event/EventEmitter";
import Actions from "./Actions";
import { IGlobalData, IPlayerData, ISaveData, ModRegistrationInspectDialogEntityInformationSubsection, ModRegistrationInspectDialogInformationSection, ModRegistrationMainDialogPanel } from "./IDebugTools";
import LocationSelector from "./LocationSelector";
import UnlockedCameraMovementHandler from "./UnlockedCameraMovementHandler";
import { TemperatureOverlay } from "./overlay/TemperatureOverlay";
import AccidentalDeathHelper from "./ui/AccidentalDeathHelper";
import { DebugToolsDialogPanelClass } from "./ui/DebugToolsDialog";
import DebugToolsPrompts from "./ui/DebugToolsPrompts";
import DebugToolsPanel from "./ui/component/DebugToolsPanel";
interface IDebugToolsEvents extends Events<Mod> {
    playerDataChange<K extends keyof IPlayerData>(playerId: number, property: K, newValue: IPlayerData[K]): any;
    inspect(): any;
    permissionsChange(): any;
}
export default class DebugTools extends Mod {
    event: IEventEmitter<this, IDebugToolsEvents>;
    static readonly INSTANCE: DebugTools;
    static readonly LOG: Log;
    readonly actions: Actions;
    readonly selector: LocationSelector;
    readonly unlockedCameraMovementHandler: UnlockedCameraMovementHandler;
    readonly prompts: DebugToolsPrompts;
    readonly modRegistryMainDialogPanels: InterModRegistry<ModRegistrationMainDialogPanel>;
    readonly modRegistryInspectDialogPanels: InterModRegistry<ModRegistrationInspectDialogInformationSection>;
    readonly modRegistryInspectDialogEntityInformationSubsections: InterModRegistry<ModRegistrationInspectDialogEntityInformationSubsection>;
    readonly bindableToggleDialog: Bindable;
    readonly bindableCloseInspectDialog: Bindable;
    readonly bindableInspectTile: Bindable;
    readonly bindableInspectLocalPlayer: Bindable;
    readonly bindableInspectItem: Bindable;
    readonly bindableHealLocalPlayer: Bindable;
    readonly bindableTeleportLocalPlayer: Bindable;
    readonly bindableToggleNoClipOnLocalPlayer: Bindable;
    readonly bindableToggleCameraLock: Bindable;
    readonly bindableToggleFullVisibility: Bindable;
    readonly bindablePaint: Bindable;
    readonly bindableErasePaint: Bindable;
    readonly bindableClearPaint: Bindable;
    readonly bindableCancelPaint: Bindable;
    readonly bindableCompletePaint: Bindable;
    readonly dictionary: Dictionary;
    readonly messageFailureTileBlocked: Message;
    readonly source: Source;
    readonly actionPlaceTemplate: ActionType;
    readonly actionSelectionExecute: ActionType;
    readonly actionTeleportEntity: ActionType;
    readonly actionKill: ActionType;
    readonly actionClone: ActionType;
    readonly actionSetTime: ActionType;
    readonly actionHeal: ActionType;
    readonly actionSetStat: ActionType;
    readonly actionSetStatMax: ActionType;
    readonly actionSetAlignment: ActionType;
    readonly actionSetTamed: ActionType;
    readonly actionRemove: ActionType;
    readonly actionChangeLayer: ActionType;
    readonly actionChangeTerrain: ActionType;
    readonly actionToggleTilled: ActionType;
    readonly actionAddItemToInventory: ActionType;
    readonly actionSetDurability: ActionType;
    readonly actionSetDecay: ActionType;
    readonly actionSetQuality: ActionType;
    readonly actionSetQualityBulk: ActionType;
    readonly actionSetDurabilityBulk: ActionType;
    readonly actionSetDecayBulk: ActionType;
    readonly actionClearInventory: ActionType;
    readonly actionPaint: ActionType;
    readonly actionSetSkill: ActionType;
    readonly actionSetGrowingStage: ActionType;
    readonly actionToggleNoclip: ActionType;
    readonly actionRenameIsland: ActionType;
    readonly actionMoveToIsland: ActionType;
    readonly actionForceSailToCivilization: ActionType;
    readonly actionReplacePlayerData: ActionType;
    readonly actionFastForward: ActionType;
    readonly actionClearNotes: ActionType;
    readonly actionSetPlayerData: ActionType;
    readonly actionMagicalPropertyRemove: ActionType;
    readonly actionMagicalPropertyChange: ActionType;
    readonly actionMagicalPropertyClearAll: ActionType;
    readonly dialogMain: DialogId;
    readonly dialogInspect: DialogId;
    readonly inspectionTemperature: InspectType;
    readonly menuBarButton: MenuBarButtonType;
    readonly overlayTarget: OverlayType;
    readonly overlayPaint: OverlayType;
    data: ISaveData;
    globalData: IGlobalData;
    temperatureOverlay: TemperatureOverlay;
    accidentalDeathHelper: AccidentalDeathHelper;
    private cameraState;
    get isCameraUnlocked(): boolean;
    getPlayerData<K extends keyof IPlayerData>(player: Player, key: K): IPlayerData[K];
    setPlayerData<K extends keyof IPlayerData>(player: Player, key: K, value: IPlayerData[K]): void;
    initializeGlobalData(data?: IGlobalData): IGlobalData | undefined;
    initializeSaveData(data?: ISaveData): ISaveData | undefined;
    onInitialize(): void;
    onLoad(): void;
    onUnload(): void;
    onSave(): ISaveData;
    updateFog(): void;
    setCameraUnlocked(unlocked: boolean): void;
    inspect(what: Tile | Creature | Player | NPC | Item): void;
    toggleDialog(): void;
    hasPermission(player?: Player): boolean | undefined;
    toggleFog(fog: boolean): void;
    toggleLighting(lighting: boolean): void;
    debugToolsAccessCommand(_: any, player: Player, args: string): void;
    postFieldOfView(): void;
    onGameScreenVisible(): void;
    protected onGamePlay(): void;
    protected onRendererCreated(_: any, renderer: Renderer): void;
    getMaxZoomLevel(): number | undefined;
    getZoomLevel(_renderer: any, zoomLevel: number): number | undefined;
    protected getCameraPosition(_: any, position: IVector2): IVector2 | undefined;
    onPlayerDie(player: Player): false | void;
    onPlayerRender(player: Player): false | void;
    protected getPlayerMaxWeight(player: Player, weight: number): number;
    onToggleCameraLock(): boolean;
    onToggleFullVisibility(): boolean;
    onInspectTile(): boolean;
    onInspectItem(api: IBindHandlerApi): boolean;
    onInspectLocalPlayer(): boolean;
    onHealLocalPlayer(): boolean;
    onTeleportLocalPlayer(api: IBindHandlerApi): boolean;
    onToggleNoClipOnLocalPlayer(): boolean;
    getAmbientColor(api: IInjectionApi<WorldRenderer, "calculateAmbientColor">): void;
    getTileLightLevel(api: IInjectionApi<Island, "calculateTileLightLevel">, tile: Tile): void;
    private needsUpgrade;
}
export { DebugToolsDialogPanelClass, DebugToolsPanel, ModRegistrationMainDialogPanel };
